import telebot
from telebot import types
from urllib.parse import unquote
from tokens import BOT_TELEGRAM_TOKEN
from config import START_MESSAGE
from api import librex

bot = telebot.TeleBot(BOT_TELEGRAM_TOKEN)


def make_buttons(data):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    - —Å–ø–µ—Ü–∞–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    - –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ –≤ Telegram Web App
    """
    if "special_response" in data:
        markup = types.InlineKeyboardMarkup()
        webApp = types.WebAppInfo(data["special_response"]["source"])
        markup.add(
            types.InlineKeyboardButton(
                data["special_response"]["source"], web_app=webApp
            )
        )
    else:
        markup = types.InlineKeyboardMarkup()
        # –ü–ï–†–ï–í–û–î–ò–ú –°–ê–ô–¢ –í HTTPS
        url: str = data["url"]
        url = url.replace("http://", "https://", 1)
        webApp = types.WebAppInfo(url)
        markup.add(types.InlineKeyboardButton(data["title"], web_app=webApp))
    return markup


def send_fast_answer(message, data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–µ—Ü–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    Example:
    {
        "special_response": {
            "response": "Gentoo may refer to:\n\nGentoo penguin, ",
            "source": "https://wiki.femboy.hu/wiki/gentoo?lang=en"
        }
    }

    Args:
        message (json): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –±–æ—Ç—É(—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
        data (json): –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –≤ –≤–∏–¥–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞, –æ–ø–∏—Å–∞–Ω–∏–µ)
    """

    markup = make_buttons(data)
    bot.send_message(
        message.chat.id,
        data["special_response"]["response"],
        reply_markup=markup,
    )


def send_answer(message, data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

    Args:
        message (json): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –±–æ—Ç—É(—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
        data (json): –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –≤ –≤–∏–¥–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞, –æ–ø–∏—Å–∞–Ω–∏–µ)
    """
    markup = make_buttons(data)
    response = f'üìå {data["title"]}\nüåê {data["url"]}\n {data["description"]}'
    bot.send_message(
        message.chat.id,
        response,
        reply_markup=markup,
    )


def generate_answer(message, page=0):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫

    Args:
        message (json): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –±–æ—Ç—É(—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
        page (string): –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞(–ø–æ-–º–æ–ª—á–∞–Ω–∏—é = 0)
    """
    datas = librex.request(message.text, page)
    if datas == []:
        bot.send_message(
            message.chat.id,
            "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
        )

    else:
        for data in datas:
            if "special_response" in data:
                send_fast_answer(message, data)
            else:
                send_answer(message, data)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏(1, 2, 3 –∏ —Ç.–ø.)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(f"{1}", callback_data=str(1)),
            types.InlineKeyboardButton(f"{2}", callback_data=str(2)),
            types.InlineKeyboardButton(f"{3}", callback_data=str(3)),
            types.InlineKeyboardButton(f"{4}", callback_data=str(4)),
            types.InlineKeyboardButton(f"{5}", callback_data=str(5)),
            types.InlineKeyboardButton(f"{6}", callback_data=str(6)),
            types.InlineKeyboardButton(f"{7}", callback_data=str(7)),
            types.InlineKeyboardButton(f"{8}", callback_data=str(8)),
        )
        bot.send_message(
            message.chat.id,
            message.text,
            reply_markup=markup,
        )


@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    bot.reply_to(message, START_MESSAGE)


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    """–ó–∞—Ö–≤–∞—Ç –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    generate_answer(message, 0)


@bot.callback_query_handler(lambda call: True)
def handle(call):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Args:
        call (string): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    """
    generate_answer(call.message, call.data)


bot.infinity_polling()
